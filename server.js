 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const myTimestamp = require('./scripts/timestamp');
var moment = require('moment');
var Sugar = require("sugar-date");


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/:date')
    .get(function(req, res) {
      var retVal;
      var date = myTimestamp.getDate(req.params.date);
  
      //check for invalid input
      if(isNaN(date.hoursAgo())){
        retVal = { 
          "unix": null,
          "natural": null
        }
      }
      //return unix timestamp and natural language date
      else {
        retVal = {
        "unix": date.format('{X}'),
        "natural": date.medium()
        }
      }
      res.send(retVal);
});

app.route('/api/timestamp/:date?')
  .get( (req, res) => {
  let date = new Date();
    if(req.params.date){
      if(Number.isInteger(parseInt(req.params.date))){
        date = new Date(parseInt(req.params.date));
      } else {
        date = new Date(req.params.date)
      }
      if(isNaN(date.getTime())) {
        res.send({error: "Invalid date"});
        return
      }
    }
    res.send({unix: date.getTime(), utc: date.toUTCString()});
  });

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

